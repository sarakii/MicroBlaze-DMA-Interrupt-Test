/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xaxidma.h>
#include "xintc.h"

#define _countof(arr) ( sizeof(arr) / sizeof(*(arr)) )

#define INTC		        XIntc
#define RX_INTR_ID		    XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID // INTC SOURCE S2MM - RX
#define TX_INTR_ID		    XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID // INTC SOURCE MM2S - TX
#define INTC_DEVICE_ID      XPAR_INTC_0_DEVICE_ID
#define INTC_HANDLER	XIntc_InterruptHandler

typedef struct
{
	int nums_tx[40];
	float nums_rx[40];
}BRAM2_Data;
static BRAM2_Data *bram2_data = (BRAM2_Data *)0xc0000000; // BRAM BASE ADDRESS PTR

static XAxiDma xaxidma; // XDMA INSTANCE

static INTC Intc;	/* Instance of the Interrupt Controller */

// PROTOTYPES
static int SetupIntrSystem(INTC * IntcInstancePtr, XAxiDma* AxiDmaPtr, u16 TxIntrId, u16 RxIntrId);
static void TxIntrHandler(void *Callback);
static void RxIntrHandler(void *Callback);

int main()
{
	int Status;
	int i, ret = 0;
	XAxiDma_Config *xaxidma_cfg; // XDMA CONFIG STRUCTURE

    init_platform(); // INIT HARDWARE: UART, CACHE

    print("Hello World\r\n");

    // INIT XDMA
	xaxidma_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	XAxiDma_CfgInitialize(&xaxidma, xaxidma_cfg);
	ret = XAxiDma_Selftest(&xaxidma);
	if (ret != XST_SUCCESS)
	{
		printf("XAxiDma_Selftest() failed! ret=%d\n", ret);
		goto err;
	}

	// SET UP INTERRUPT
	Status = SetupIntrSystem(&Intc, &xaxidma, TX_INTR_ID, RX_INTR_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed intr setup\r\n");
		return XST_FAILURE;
	}
	/* Disable all interrupts before setup */
	XAxiDma_IntrDisable(&xaxidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrDisable(&xaxidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	/* Enable all interrupts */
	XAxiDma_IntrEnable(&xaxidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrEnable(&xaxidma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);

	// PRINT BASE ADDR OF RX_MM AND TX_MM
	printf("nums_tx=%p, nums_rx=%p\n", bram2_data->nums_tx, bram2_data->nums_rx);

	// INIT DATA IN TX_MM
	for (i = 0; i < _countof(bram2_data->nums_tx); i++)
	{
		bram2_data->nums_tx[i] = 314 * (i + 1);
		if (i & 1)
			bram2_data->nums_tx[i] = -bram2_data->nums_tx[i];
	}

	// SEND MM TO S [XAxiDma_SimpleTransfer]
	ret = XAxiDma_SimpleTransfer(&xaxidma, (uintptr_t)bram2_data->nums_tx, sizeof(bram2_data->nums_tx), XAXIDMA_DMA_TO_DEVICE);
	if (ret != XST_SUCCESS)
	{
		printf("XAxiDma_SimpleTransfer(XAXIDMA_DMA_TO_DEVICE) failed! ret=%d\n", ret);
		goto err;
	}

	// S TO MM [XAxiDma_SimpleTransfer]
	ret = XAxiDma_SimpleTransfer(&xaxidma, (uintptr_t)bram2_data->nums_rx, sizeof(bram2_data->nums_rx), XAXIDMA_DEVICE_TO_DMA);
	if (ret != XST_SUCCESS)
	{
		printf("XAxiDma_SimpleTransfer(XAXIDMA_DEVICE_TO_DMA) failed! ret=%d\n", ret);
		goto err;
	}

	// WAIT FOR XDMA MM 2 S OVER
	i = 0;
	while (XAxiDma_Busy(&xaxidma, XAXIDMA_DMA_TO_DEVICE))
	{
		i++;
		if (i == 200000) // TIMEOUT SETTING
		{
			printf("DMA Tx timeout! DMASR=0x%08lx\n", XAxiDma_ReadReg(xaxidma.RegBase + XAXIDMA_TX_OFFSET, XAXIDMA_SR_OFFSET));
			goto err;
		}
	}
	printf("DMA Tx complete!\n");

	// WAIT FOR XDMA MM 2 S OVER
	i = 0;
	while (XAxiDma_Busy(&xaxidma, XAXIDMA_DEVICE_TO_DMA))
	{
		i++;
		if (i == 200000) // TIMEOUT SETTING
		{
			// (the incoming packet is bigger than what is specified in the DMA length register)
			printf("DMA Rx timeout! DMASR=0x%08lx\n", XAxiDma_ReadReg(xaxidma.RegBase + XAXIDMA_RX_OFFSET, XAXIDMA_SR_OFFSET));
			goto err;
		}
	}
	printf("DMA Rx complete!\n");

err:
	// AFTER RECV, PRINT DATA IN MM
	for (i = 0; i < _countof(bram2_data->nums_rx); i++)
		printf("nums_rx[%d]=%f\n", i, bram2_data->nums_rx[i]);

	cleanup_platform();
	return 0;
}

static int SetupIntrSystem(INTC * IntcInstancePtr,
			   XAxiDma * AxiDmaPtr, u16 TxIntrId, u16 RxIntrId)
{
	int Status;

#ifdef XPAR_INTC_0_DEVICE_ID

	// INIT AXI INTERRUPT CONTROLLER AND CONNECT ISR(NAMELY HANDLER OR CALLBACK)
	Status = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID); // INIT AXI INTERRUPT CONTROLLER
	if (Status != XST_SUCCESS) {
		xil_printf("Failed init intc\r\n");
		return XST_FAILURE;
	}
	Status = XIntc_Connect(IntcInstancePtr, TxIntrId, (XInterruptHandler)TxIntrHandler, AxiDmaPtr); // CONNECT TX ISR
	if (Status != XST_SUCCESS) {
		xil_printf("Failed tx connect intc\r\n");
		return XST_FAILURE;
	}
	Status = XIntc_Connect(IntcInstancePtr, RxIntrId, (XInterruptHandler)RxIntrHandler, AxiDmaPtr); // CONNECT RX ISR
	if (Status != XST_SUCCESS) {
		xil_printf("Failed rx connect intc\r\n");
		return XST_FAILURE;
	}

	// START INTERRUPT CONTROLLER
	Status = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to start intc\r\n");
		return XST_FAILURE;
	}
	XIntc_Enable(IntcInstancePtr, TxIntrId);
	XIntc_Enable(IntcInstancePtr, RxIntrId);

#else

	XScuGic_Config *IntcConfig;


	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	XScuGic_SetPriorityTriggerType(IntcInstancePtr, TxIntrId, 0xA0, 0x3);

	XScuGic_SetPriorityTriggerType(IntcInstancePtr, RxIntrId, 0xA0, 0x3);
	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above performs
	 * the specific interrupt processing for the device.
	 */
	Status = XScuGic_Connect(IntcInstancePtr, TxIntrId,
				(Xil_InterruptHandler)TxIntrHandler,
				AxiDmaPtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	Status = XScuGic_Connect(IntcInstancePtr, RxIntrId,
				(Xil_InterruptHandler)RxIntrHandler,
				AxiDmaPtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	XScuGic_Enable(IntcInstancePtr, TxIntrId);
	XScuGic_Enable(IntcInstancePtr, RxIntrId);


#endif

	// EXCEPTION CONFIG * 3
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)INTC_HANDLER,
			(void *)IntcInstancePtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

// TX CALLBACK
static void TxIntrHandler(void *Callback)
{

	u32 IrqStatus;
	int TimeOut;
	XAxiDma *AxiDmaInst = (XAxiDma *)Callback;

	// GET INTC STATUS REG DATA?
	IrqStatus = XAxiDma_IntrGetIrq(AxiDmaInst, XAXIDMA_DMA_TO_DEVICE);

	// CLEAR INTC STATUS REG?
	XAxiDma_IntrAckIrq(AxiDmaInst, IrqStatus, XAXIDMA_DMA_TO_DEVICE);

	// DO NOTHING IF NO INTERRUPT
	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK)) {
		return;
	}

	// IF ERROR INTERRUPT OCCUR
	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK)) {
		Error = 1;
		XAxiDma_Reset(AxiDmaInst);
		TimeOut = RESET_TIMEOUT_COUNTER;
		while (TimeOut) {
			if (XAxiDma_ResetIsDone(AxiDmaInst)) {
				break;
			}
			TimeOut -= 1;
		}
		return;
	}

	// CORRECT INTERRUPT OCCUR
	if ((IrqStatus & XAXIDMA_IRQ_IOC_MASK)) {
		TxDone = 1;
	}
}

// RX CALLBACK
static void RxIntrHandler(void *Callback)
{
	u32 IrqStatus;
	int TimeOut;
	XAxiDma *AxiDmaInst = (XAxiDma *)Callback;

	/* Read pending interrupts */
	IrqStatus = XAxiDma_IntrGetIrq(AxiDmaInst, XAXIDMA_DEVICE_TO_DMA);

	/* Acknowledge pending interrupts */
	XAxiDma_IntrAckIrq(AxiDmaInst, IrqStatus, XAXIDMA_DEVICE_TO_DMA);

	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK)) {
		return;
	}

	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK)) {
		Error = 1;
		XAxiDma_Reset(AxiDmaInst);
		TimeOut = RESET_TIMEOUT_COUNTER;
		while (TimeOut) {
			if(XAxiDma_ResetIsDone(AxiDmaInst)) {
				break;
			}
			TimeOut -= 1;
		}
		return;
	}

	if ((IrqStatus & XAXIDMA_IRQ_IOC_MASK)) {
		RxDone = 1;
	}
}
